{"version":3,"sources":["components/Footer/Footer.jsx","App.js","constants.js","redux/models/cardsModel.js","redux/store.js","index.js"],"names":["Footer","style","color","GameOver","playAgain","useStoreActions","actions","cards","className","onClick","CardsSection","console","log","useStoreState","state","isShowToast","toastText","items","moves","fetchCards","React","useEffect","gridTemplate","Math","ceil","length","map","card","key","display","gap","Toast","text","Card","memo","index","id","isUp","url","isActive","flipCard","disabled","src","alt","CARDS_COUNT","action","payload","filter","x","find","removeCards","forEach","showToast","clearToast","delay","timeout","Promise","resolve","setTimeout","onShowToast","thunkOn","a","coverCards","onFlipCard","target","getState","twinCard","upCards","TOAST_TIMEOUT","this","thunk","fetch","process","response","ok","json","result","photo","urls","small","_","shuffle","setCards","status","checkIfGameIsOver","actionOn","isGameOver","resetGame","loading","onLoading","startType","type","resolvedTargets","start","end","model","cardsModel","store","createStore","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.0cb149f9.chunk.js","sourcesContent":["import React from 'react'\nimport './Footer.scss'\n\nexport default function Footer() {\n    return (\n        <footer>Made with <span style={{ color: \"#f00\" }}>‚ù§</span> by Idan Izicovich</footer>\n    )\n}\n","import React from 'react';\nimport Footer from './components/Footer'\nimport { useStoreActions, useStoreState } from 'easy-peasy'\nimport { useCards } from './hooks'\nimport './App.scss'\nimport _ from 'lodash'\n\nexport default function App() {\n  const { isGameOver } = useStoreState(state => state.cards)\n\n  // const isGameOver = false;\n  return (\n    <main>\n      <header>TODO: header</header>\n      {\n        isGameOver\n          ? <GameOver />\n          : <CardsSection />\n      }\n      <Footer />\n    </main>\n  );\n}\n\nfunction GameOver() {\n\n  const { playAgain } = useStoreActions(actions => actions.cards)\n\n  const winningPlayer = 1;\n\n  return <section className=\"game-over\">\n    <h3>\n      Game Over\n    </h3>\n    <h4>\n      Player {winningPlayer} won!\n    </h4>\n    <article>\n      <button onClick={() => playAgain()}>\n        Play Again?\n      </button>\n    </article>\n  </section>\n\n}\n\nfunction CardsSection() {\n  console.log('render cards section')\n  const { isShowToast, toastText, items, moves } = useStoreState(state => state.cards)\n\n  const { fetchCards } = useStoreActions(actions => actions.cards)\n\n  React.useEffect(() => {\n    fetchCards()\n  }, [fetchCards])\n\n  return (\n    <section className=\"cards\">\n      <article style={{ gridTemplate: `repeat(${Math.ceil(items.length ** 0.5)}, 1fr) / repeat(${Math.ceil(items.length ** 0.5)}, 1fr)` }}>\n        {items.map((card, key) =>\n          <Card {...card} key={key} />)}\n      </article>\n      <aside>\n        <h5 style={{display:'grid', gap:\"1em\", gridTemplate: '1fr / 1fr 1fr'}}>\n          <strong>moves:</strong>\n          <span>{moves}</span>\n        </h5>\n        <h4>\n          {isShowToast && <Toast text={toastText} />}\n        </h4>\n      </aside>\n    </section>\n  );\n}\n\nfunction Toast({ text }) {\n  return <span>{text}</span>\n}\n\nconst Card = React.memo(({ index, id, isUp, url, isActive }) => {\n  console.log('render Card')\n  const { flipCard } = useStoreActions(actions => actions.cards)\n  const cover = '#';\n\n  return (\n    <button className=\"card\"\n      onClick={() => flipCard(index)} disabled={!isActive}>\n      {isUp\n        ? <img src={url} alt={id} />\n        : cover}\n    </button>\n  )\n})","export const CARDS_COUNT = 4 ** 2;\nexport const TOAST_TIMEOUT = 2e3;","import { action, thunk, actionOn, thunkOn } from 'easy-peasy'\nimport { TOAST_TIMEOUT, CARDS_COUNT } from '../../constants'\nimport _ from 'lodash'\n\nexport let items = []\nexport let toastText = ''\n\nexport const flipCard = action((state, payload) => {\n    if (state.items.filter(x => x.isActive && x.isUp).length >= 2)\n        return;\n\n    state.moves++;\n\n    const index = payload;\n    const card = state.items.find(x => x.index === index)\n    card.isUp = true;\n\n    return { ...state, items: [...state.items] }\n})\n\nexport const removeCards = action((state, payload) => {\n    const cardsToRemove = payload;\n    cardsToRemove.forEach(card => card.isActive = false)\n})\n\nexport const showToast = action((state, payload) => {\n    state.isShowToast = true;\n    state.toastText = payload;\n})\n\nexport const clearToast = action(state => {\n    state.isShowToast = false;\n    state.toastText = '';\n})\n\nconst delay = timeout =>\n    new Promise(resolve => setTimeout(() => {\n        resolve()\n    }, timeout))\n\nexport const onShowToast = thunkOn(\n    actions => actions.showToast,\n    async (actions) => {\n        await delay(TOAST_TIMEOUT);\n        actions.clearToast();\n    }\n)\n\nexport const coverCards = action((state, payload) => {\n    const cardsToCover = payload;\n    cardsToCover.forEach(card => card.isUp = false)\n})\n\nexport const onFlipCard = thunkOn(\n    actions => actions.flipCard,\n    async (actions, target, { getState }) => {\n        const state = getState();\n        const index = target.payload;\n        const card = state.items.find(x => x.index === index)\n\n        const twinCard = state.items.find(x =>\n            x !== card && x.id === card.id)\n\n        const upCards = state.items.filter(x => x.isUp && x.isActive);\n\n        if (upCards.length >= 2) {\n            if (twinCard?.isUp && card.isUp) {\n                actions.showToast(`Found ${card.id}!`)\n                await delay(TOAST_TIMEOUT / 2)\n                actions.removeCards([card, twinCard])\n            } else {\n                actions.showToast(`Aww... try again!`)\n                await delay(TOAST_TIMEOUT * 0.7)\n                actions.coverCards(upCards)\n            }\n        }\n    })\n\nclass Card {\n    constructor(id, index, url) {\n        this.isUp = false;\n        this.id = id;\n        this.index = index;\n        this.url = url;\n        this.isActive = true;\n    }\n}\n\nexport const fetchCards = thunk(async (actions, payload) => {\n    const response = await fetch(\n        `https://api.unsplash.com/photos/`\n        + `?client_id=${process.env.REACT_APP_UNSPLASH_ACCESS_KEY}`\n        + `&per_page=${CARDS_COUNT / 2}`)\n    if (response.ok) {\n\n        const result = await response.json()\n        let cards = result.map((photo, index) => new Card(photo.id, index, photo.urls.small))\n        cards = [...cards, ...result.map((photo, index) => new Card(photo.id, index + cards.length, photo.urls.small))]\n        cards = _.shuffle(cards)\n        actions.setCards(cards)\n    } else {\n        console.log(\n            `response is not ok` +\n            `status: ${response.status} ${response.text}`)\n    }\n})\n\nexport const setCards = action((state, payload) => {\n    state.items = payload;\n})\n\nexport const checkIfGameIsOver = actionOn(\n    actions => actions.removeCards,\n    state => {\n        if (state.items.filter(x => x.isActive).length === 0)\n            state.isGameOver = true;\n    }\n)\n\nexport const resetGame = action(state => {\n    state.isGameOver = false;\n    state.items = [];\n    state.moves = 0;\n})\n\nexport const playAgain = thunk(actions => {\n    actions.resetGame()\n    actions.fetchCards()\n})\n\nexport let loading = false;\n\nexport const onLoading = actionOn(\n    actions => [\n        actions.fetchCards.startType,\n        actions.fetchCards.type\n    ],\n    (state, target) => {\n        const [start, end] = target.resolvedTargets;\n        switch (target.type) {\n            case start:\n                state.loading = true;\n                break;\n            case end:\n                state.loading = false;\n                break;\n            default: break;\n        }\n    }\n)\n\nexport let isGameOver = false;\nexport let isShowToast = false;\nexport let moves = 0;","import { createStore } from 'easy-peasy'\nimport * as cardsModel from './models/cardsModel'\n\nconst model = {\n    cards: {...cardsModel},\n}\n\nconst store = createStore(model)\n\nexport default store;","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport { StoreProvider, useStoreActions, useStoreState } from 'easy-peasy'\nimport store from './redux/store'\n\nReactDOM.render(\n    <StoreProvider store={store}>\n        <App />\n    </StoreProvider>,\n    document.getElementById('root'));"],"sourceRoot":""}