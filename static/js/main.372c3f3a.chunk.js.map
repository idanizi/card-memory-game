{"version":3,"sources":["components/Footer/Footer.jsx","constants.js","App.js","hooks/index.js","redux/models/cardsModel.js","redux/store.js","index.js"],"names":["Footer","style","color","CARDS_COUNT","GameOver","playAgain","useStoreActions","actions","cards","className","onClick","CardsSection","fetchCards","useStoreState","state","useEffect","useCards","isShowToast","toastText","gridTemplate","Math","sqrt","map","props","key","Card","Toast","text","index","id","isUp","flipCard","action","payload","card","find","x","removeCards","cardsToRemove","_","remove","c","includes","showToast","clearToast","delay","timeout","Promise","resolve","setTimeout","onShowToast","thunkOn","a","onFlipCard","target","getState","twinCard","upCards","filter","length","TOAST_TIMEOUT","forEach","thunk","keys","Array","fill","i","floor","result","splice","random","setCards","checkIfGameIsOver","actionOn","isGameOver","resetGame","loading","onLoading","startType","type","resolvedTargets","start","end","model","cardsModel","store","createStore","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.372c3f3a.chunk.js","sourcesContent":["import React from 'react'\nimport './Footer.scss'\n\nexport default function Footer() {\n    return (\n        <footer>Made with <span style={{ color: \"#f00\" }}>‚ù§</span> by Idan Izicovich</footer>\n    )\n}\n","export const CARDS_COUNT = 4 ** 2;\nexport const TOAST_TIMEOUT = 2e3;","import React from 'react';\nimport Footer from './components/Footer'\nimport { useStoreActions, useStoreState } from 'easy-peasy'\nimport { useCards } from './hooks'\nimport './App.scss'\nimport { CARDS_COUNT } from './constants';\n\nexport default function App() {\n  const { isGameOver } = useStoreState(state => state.cards)\n\n  // const isGameOver = false;\n  return (\n    <main>\n      <header>TODO: header</header>\n      {\n        isGameOver\n          ? <GameOver />\n          : <CardsSection />\n      }\n      <Footer />\n    </main>\n  );\n}\n\nfunction GameOver() {\n\n  const { playAgain } = useStoreActions(actions => actions.cards)\n\n  const winningPlayer = 1;\n\n  return <section className=\"game-over\">\n    <h3>\n      Game Over\n    </h3>\n    <h4>\n      Player {winningPlayer} won!\n    </h4>\n    <article>\n      <button onClick={playAgain}>\n        Play Again?\n      </button>\n    </article>\n  </section>\n\n}\n\nfunction CardsSection() {\n  const { cards } = useCards()\n  const { isShowToast, toastText } = useStoreState(state => state.cards)\n\n  const Cards = () =>\n    cards.map((props, key) => <Card {...props} key={key} />)\n\n  return (\n    <section className=\"cards\">\n      <article style={{gridTemplate: `repeat(${Math.sqrt(CARDS_COUNT)}, 1fr) / repeat(${Math.sqrt(CARDS_COUNT)}, 1fr)`}}>\n        <Cards />\n      </article>\n      <aside>\n        {isShowToast && <Toast text={toastText} />}\n      </aside>\n    </section>\n  );\n}\n\nfunction Toast({ text }) {\n  return <span>{text}</span>\n}\n\nfunction Card({ index, id, isUp }) {\n  const { flipCard } = useStoreActions(actions => actions.cards)\n  const cover = '#';\n\n  return (\n    <button className=\"card\"\n      onClick={() => flipCard(index)}>\n      {isUp ? id : cover}\n    </button>\n  )\n}","import { useEffect } from 'react'\nimport { useStoreActions, useStoreState } from 'easy-peasy'\n\nexport function useCards() {\n    const { fetchCards } = useStoreActions(actions => actions.cards)\n    const { cards } = useStoreState(state => state.cards)\n\n    useEffect(() => {\n        fetchCards()\n    }, [fetchCards])\n\n    return { cards }\n}","import { action, thunk, actionOn, thunkOn } from 'easy-peasy'\nimport { CARDS_COUNT, TOAST_TIMEOUT } from '../../constants'\nimport _ from 'lodash'\n\nexport const cards = []\n\nexport const flipCard = action((state, payload) => {\n    const index = payload;\n    const card = state.cards.find(x => x.index === index)\n    card.isUp = !card.isUp;\n})\n\nexport const removeCards = action((state, payload) => {\n    const cardsToRemove = payload;\n    _.remove(state.cards, x => cardsToRemove.map(c => c.index).includes(x.index))\n})\n\nexport const showToast = action((state, payload) => {\n    state.isShowToast = true;\n    state.toastText = payload;\n})\n\nexport const clearToast = action(state => {\n    state.isShowToast = false;\n    state.toastText = '';\n})\n\nconst delay = timeout =>\n    new Promise(resolve => setTimeout(() => {\n        resolve()\n    }, timeout))\n\nexport const onShowToast = thunkOn(\n    actions => actions.showToast,\n    async (actions) => {\n        await delay(TOAST_TIMEOUT);\n        actions.clearToast();\n    }\n)\n\nexport const onFlipCard = thunkOn(\n    actions => actions.flipCard,\n    async (actions, target, { getState }) => {\n        const state = getState();\n        const index = target.payload;\n        const card = state.cards.find(x => x.index === index)\n        const twinCard = state.cards.find(x =>\n            x !== card && x.id === card.id)\n        const upCards = state.cards.filter(x => x.isUp);\n        if (upCards.length === 2) {\n            if (twinCard?.isUp && card.isUp) {\n                actions.showToast(`Found ${card.id}!`)\n                await delay(TOAST_TIMEOUT / 2)\n                actions.removeCards([card, twinCard])\n            } else {\n                actions.showToast(`Aww... try again!`)\n                await delay(TOAST_TIMEOUT * 0.7)\n                upCards.forEach(x => x.isUp = false)\n            }\n        }\n    })\n\nexport const fetchCards = thunk(async (actions, payload) => {\n    // todo: fetch cards\n    const keys = Array(CARDS_COUNT)\n        .fill(0)\n        .map((x, i) => i % Math.floor(CARDS_COUNT / 2))\n\n    const result = Array(CARDS_COUNT)\n        .fill(0)\n        .map((x, i) => ({\n            index: i,\n            id: keys.splice(_.random(keys.length - 1), 1)[0],\n            isUp: false,\n        }))\n\n    actions.setCards(result)\n})\n\nexport const setCards = action((state, payload) => {\n    state.cards = payload;\n})\n\nexport const checkIfGameIsOver = actionOn(\n    actions => actions.removeCards,\n    state => {\n        if (state.cards.length === 0)\n            state.isGameOver = true;\n    }\n)\n\nexport const resetGame = action(state => {\n    state.isGameOver = false;\n})\n\nexport const playAgain = thunk(actions => {\n    actions.resetGame()\n    actions.fetchCards()\n})\n\nexport let loading = false;\n\nexport const onLoading = actionOn(\n    actions => [\n        actions.fetchCards.startType,\n        actions.fetchCards.type\n    ],\n    (state, target) => {\n        const [start, end] = target.resolvedTargets;\n        switch (target.type) {\n            case start:\n                state.loading = true;\n                break;\n            case end:\n                state.loading = false;\n                break;\n            default: break;\n        }\n    }\n)\n\nexport let isGameOver = false;\nexport let isShowToast = false;","import { createStore } from 'easy-peasy'\nimport * as cardsModel from './models/cardsModel'\n\nconst model = {\n    cards: {...cardsModel},\n}\n\nconst store = createStore(model)\n\nexport default store;","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport { StoreProvider, useStoreActions, useStoreState } from 'easy-peasy'\nimport store from './redux/store'\n\nReactDOM.render(\n    <StoreProvider store={store}>\n        <App />\n    </StoreProvider>,\n    document.getElementById('root'));"],"sourceRoot":""}