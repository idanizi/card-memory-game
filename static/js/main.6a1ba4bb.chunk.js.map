{"version":3,"sources":["components/Footer/Footer.jsx","components/Toast/Toast.jsx","components/Card/Card.jsx","components/CardsSection.jsx","hooks/index.js","components/Moves.jsx","components/GameOver/GameOver.jsx","constants.js","redux/models/cardsModel.js","redux/store.js","index.js","App.js"],"names":["Footer","style","color","React","memo","useStoreState","state","cards","isShowToast","toastText","isGood","Snackbar","open","TransitionComponent","Slide","anchorOrigin","vertical","horizontal","Alert","severity","index","isUp","id","url","isActive","description","flipCard","useStoreActions","actions","useState","className","setClassName","useEffect","str","onClick","src","alt","CardsSection","items","fetchCards","useCards","gridTemplate","Math","ceil","length","justifyItems","map","card","key","moves","display","gap","GameOver","playAgain","Button","variant","CARDS_COUNT","action","payload","filter","x","find","removeCards","forEach","showToast","text","clearToast","delay","timeout","Promise","resolve","setTimeout","onShowToast","thunkOn","a","coverCards","onFlipCard","target","getState","twinCard","upCards","TOAST_TIMEOUT","Card","this","thunk","fetch","process","response","ok","json","result","photo","urls","small","alt_description","_","shuffle","setCards","console","log","status","checkIfGameIsOver","actionOn","isGameOver","resetGame","loading","onLoading","startType","type","resolvedTargets","start","end","model","cardsModel","store","createStore","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.6a1ba4bb.chunk.js","sourcesContent":["import React from 'react'\nimport './Footer.scss'\n\nexport default function Footer() {\n    return (\n        <footer>Made with <span style={{ color: \"#f00\" }}>‚ù§</span> by Idan Izicovich</footer>\n    )\n}\n","import React from 'react'\nimport Snackbar from '@material-ui/core/Snackbar'\nimport Slide from '@material-ui/core/Slide'\nimport Alert from '@material-ui/lab/Alert'\nimport { useStoreState } from 'easy-peasy'\n\nfunction Toast() {\n\n    const { isShowToast, toastText, isGood } = useStoreState(state => state.cards)\n\n    return (\n        <Snackbar open={isShowToast} TransitionComponent={Slide} anchorOrigin={{vertical: \"top\", ¬†horizontal: \"right\"}}>\n            <Alert severity={isGood ? \"success\" : \"error\"}>{toastText}</Alert>\n        </Snackbar>\n    )\n}\n\nexport default React.memo(Toast);\n","import React, { useEffect, useState } from 'react'\nimport { useStoreActions } from 'easy-peasy'\n\nfunction Card({ index, id, isUp, url, isActive, description }) {\n    const { flipCard } = useStoreActions(actions => actions.cards)\n    const [className, setClassName] = useState('')\n\n    useEffect(() => {\n        let str = ''\n        if (isUp) {\n            str += 'flip-up'\n            if (!isActive)\n            str += ' disabled'\n        } else {\n            str = 'flip-down'\n        }\n        setClassName(str);\n    }, [isUp, isActive])\n\n    return (\n        <div\n            onClick={() => flipCard(index)}\n            className={\"card \" + className}\n        >\n            {isUp &&\n                <img src={url} alt={description} />\n                }\n        </div>\n    )\n}\n\nexport default React.memo(Card)","import React from 'react'\nimport { useCards } from '../hooks'\nimport Toast from './Toast'\nimport Card from './Card'\n\nexport default function CardsSection() {\n    const { items } = useCards()\n  \n    return (\n      <section className=\"cards\">\n        <article style={{\n          gridTemplate: `repeat(${Math.ceil(items.length ** 0.5)}, 1fr) / repeat(${Math.ceil(items.length ** 0.5)}, 1fr)`,\n          justifyItems:'center'\n        }}>\n          {items.map((card, key) =>\n            <Card {...card} key={key} />)}\n        </article>\n        <Toast />\n      </section>\n    );\n  }","import { useEffect } from 'react'\nimport { useStoreActions, useStoreState } from 'easy-peasy'\n\nexport function useCards() {\n    const { fetchCards } = useStoreActions(actions => actions.cards)\n    const { items } = useStoreState(state => state.cards)\n\n    useEffect(() => {\n        fetchCards()\n    }, [fetchCards])\n\n    return { items }\n}","import React from 'react'\nimport { useStoreState } from 'easy-peasy'\n\nfunction Moves() {\n    const { moves } = useStoreState(state => state.cards)\n\n    return (\n        <h5 style={{ display: 'grid', gap: \"1em\", gridTemplate: '1fr / 1fr 1fr 1fr', justifyItems: 'center' }}>\n            <span>üèÉüèª‚Äç‚ôÇÔ∏è</span><span> Moves:</span>\n            <span>{moves}</span>\n        </h5>\n    );\n}\n\nexport default React.memo(Moves)\n\n","import React from 'react'\nimport { useStoreActions } from 'easy-peasy'\nimport Button from '@material-ui/core/Button'\n\nexport default function GameOver() {\n\n    const { playAgain } = useStoreActions(actions => actions.cards)\n  \n    const winningPlayer = 1;\n  \n    return <section className=\"game-over\">\n      <h3>\n        Game Over\n      </h3>\n      <h4>\n        Player {winningPlayer} won!\n      </h4>\n      <article>\n        <Button color=\"primary\" variant=\"contained\" onClick={() => playAgain()}>\n          Play Again?\n        </Button>\n      </article>\n    </section>\n  \n  }","export const CARDS_COUNT = 4 ** 2;\nexport const TOAST_TIMEOUT = 2e3;","import { action, thunk, actionOn, thunkOn } from 'easy-peasy'\nimport { TOAST_TIMEOUT, CARDS_COUNT } from '../../constants'\nimport _ from 'lodash'\n\nexport let items = []\nexport let toastText = ''\n\nexport const flipCard = action((state, payload) => {\n    if (state.items.filter(x => x.isActive && x.isUp).length >= 2)\n        return;\n\n    state.moves++;\n\n    const index = payload;\n    const card = state.items.find(x => x.index === index)\n    card.isUp = true;\n\n    return { ...state, items: [...state.items] }\n})\n\nexport const removeCards = action((state, payload) => {\n    const cardsToRemove = payload;\n    cardsToRemove.forEach(card => card.isActive = false)\n})\n\nexport const showToast = action((state, payload) => {\n    state.isShowToast = true;\n    state.toastText = payload.text;\n    state.isGood = payload.isGood;\n})\n\nexport const clearToast = action(state => {\n    state.isShowToast = false;\n})\n\nconst delay = timeout =>\n    new Promise(resolve => setTimeout(() => {\n        resolve()\n    }, timeout))\n\nexport const onShowToast = thunkOn(\n    actions => actions.showToast,\n    async (actions) => {\n        await delay(TOAST_TIMEOUT);\n        actions.clearToast();\n    }\n)\n\nexport const coverCards = action((state, payload) => {\n    const cardsToCover = payload;\n    cardsToCover.forEach(card => card.isUp = false)\n})\n\nexport const onFlipCard = thunkOn(\n    actions => actions.flipCard,\n    async (actions, target, { getState }) => {\n        const state = getState();\n        const index = target.payload;\n        const card = state.items.find(x => x.index === index)\n\n        const twinCard = state.items.find(x =>\n            x !== card && x.id === card.id)\n\n        const upCards = state.items.filter(x => x.isUp && x.isActive);\n\n        if (upCards.length >= 2) {\n            if (twinCard?.isUp && card.isUp) {\n                actions.showToast({text: `Found ${card.description}!`, isGood: true})\n                await delay(TOAST_TIMEOUT / 2)\n                actions.removeCards([card, twinCard])\n            } else {\n                actions.showToast({text: `Aww... try again!`, isGood: false})\n                await delay(TOAST_TIMEOUT * 0.7)\n                actions.coverCards(upCards)\n            }\n        }\n    })\n\nclass Card {\n    constructor(id, index, url, description) {\n        this.isUp = false;\n        this.id = id;\n        this.index = index;\n        this.url = url;\n        this.isActive = true;\n        this.description = description;\n    }\n}\n\nexport const fetchCards = thunk(async (actions, payload) => {\n    const response = await fetch(\n        `https://api.unsplash.com/photos/`\n        + `?client_id=${process.env.REACT_APP_UNSPLASH_ACCESS_KEY}`\n        + `&per_page=${CARDS_COUNT / 2}`)\n    if (response.ok) {\n\n        const result = await response.json()\n        let cards = result.map((photo, index) => new Card(photo.id, index, photo.urls.small, photo.alt_description))\n        cards = [...cards, ...result.map((photo, index) => new Card(photo.id, index + cards.length, photo.urls.small, photo.alt_description))]\n        cards = _.shuffle(cards)\n        actions.setCards(cards)\n    } else {\n        console.log(\n            `response is not ok` +\n            `status: ${response.status} ${response.text}`)\n    }\n})\n\nexport const setCards = action((state, payload) => {\n    state.items = payload;\n})\n\nexport const checkIfGameIsOver = actionOn(\n    actions => actions.removeCards,\n    state => {\n        if (state.items.filter(x => x.isActive).length === 0)\n            state.isGameOver = true;\n    }\n)\n\nexport const resetGame = action(state => {\n    state.isGameOver = false;\n    state.items = [];\n    state.moves = 0;\n})\n\nexport const playAgain = thunk(actions => {\n    actions.resetGame()\n    actions.fetchCards()\n})\n\nexport let loading = false;\n\nexport const onLoading = actionOn(\n    actions => [\n        actions.fetchCards.startType,\n        actions.fetchCards.type\n    ],\n    (state, target) => {\n        const [start, end] = target.resolvedTargets;\n        switch (target.type) {\n            case start:\n                state.loading = true;\n                break;\n            case end:\n                state.loading = false;\n                break;\n            default: break;\n        }\n    }\n)\n\nexport let isGameOver = false;\nexport let isShowToast = false;\nexport let moves = 0;","import { createStore } from 'easy-peasy'\nimport * as cardsModel from './models/cardsModel'\n\nconst model = {\n    cards: {...cardsModel},\n}\n\nconst store = createStore(model)\n\nexport default store;","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport { StoreProvider, useStoreActions, useStoreState } from 'easy-peasy'\nimport store from './redux/store'\n\nReactDOM.render(\n    <StoreProvider store={store}>\n        <App />\n    </StoreProvider>,\n    document.getElementById('root'));","import React from 'react';\nimport Footer from './components/Footer'\nimport { useStoreState } from 'easy-peasy'\nimport CardsSection from './components/CardsSection'\nimport Moves from './components/Moves'\nimport GameOver from './components/GameOver'\nimport './App.scss'\n\nexport default function App() {\n  const { isGameOver } = useStoreState(state => state.cards)\n  \n  return (\n    <main>\n      <header>\n        <Moves />\n      </header>\n      {\n        isGameOver\n          ? <GameOver />\n          : <CardsSection />\n      }\n      <Footer />\n    </main>\n  );\n}\n\n\n\n"],"sourceRoot":""}