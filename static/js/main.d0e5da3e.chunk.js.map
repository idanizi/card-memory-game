{"version":3,"sources":["components/Footer/Footer.jsx","components/Toast/Toast.jsx","components/Card/Card.jsx","components/CardsSection.jsx","hooks/index.js","components/Moves.jsx","components/GameOver/GameOver.jsx","util/index.js","components/Login/Login.jsx","redux/models/cardsModel.js","constants.js","redux/models/sessionModel.js","redux/store.js","index.js","App.js"],"names":["Footer","style","color","React","memo","useStoreState","state","cards","isShowToast","toastText","isGood","Snackbar","open","TransitionComponent","Slide","anchorOrigin","vertical","horizontal","Alert","severity","index","isUp","id","url","isActive","description","tryFlipCard","useStoreActions","actions","useState","className","setClassName","useEffect","str","onClick","src","alt","CardsSection","items","fetchCards","useCards","gridTemplate","Math","ceil","length","justifyItems","map","card","key","moves","display","gap","GameOver","playAgain","Button","variant","delay","timeout","Promise","resolve","setTimeout","UserNameInput","userName","session","setUserName","connect","handleEnter","e","preventDefault","TextField","label","value","onChange","target","onKeyUp","keyCode","CopyButtonWithNotificationPopper","show","setShow","useRef","handleClick","a","ref","Overlay","current","placement","props","Tooltip","InviteSection","window","location","pathname","match","requiredRoomId","user","joinRoom","createRoom","joining","setJoining","isInsideRoom","roomName","uuid","console","log","isConnected","Spinner","animation","text","href","roomId","navigator","clipboard","writeText","then","catch","error","Login","isTryingToFlipCard","setIsTryingToFlipCard","action","payload","thunk","getStoreState","getStoreActions","isMyTurn","flipCard","bumpMoves","notifyFlipCard","showToast","setCardIsUp","find","getState","filter","x","onFlipCard","thunkOn","meta","injections","twinCard","upCards","TOAST_TIMEOUT","removeCards","coverCards","turnEnd","forEach","clearToast","onShowToast","fetch","response","ok","json","result","setCards","status","checkIfGameIsOver","actionOn","isGameOver","resetGame","loading","onLoading","startType","type","resolvedTargets","start","end","availableRooms","socket","isAwaitingOtherPlayer","opponent","setIsMyTurn","fetchAvailableRooms","setAvailableRooms","available","setIsConnected","setSocket","setRoomId","setRoomName","setIsAwaitingOtherPlayer","setOpponent","cardIndex","emit","onTurnEnd","io","shouldAwaitOtherPlayer","usersCountInRoom","on","connected","message","otherId","otherUserName","otherPlayerUserName","leaveRoom","onIsInsideRoomChange","model","cardsModel","sessionModel","store","createStore","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.d0e5da3e.chunk.js","sourcesContent":["import React from 'react'\nimport './Footer.scss'\n\nexport default function Footer() {\n    return (\n        <footer>Made with <span style={{ color: \"#f00\" }}>❤</span> by Idan Izicovich</footer>\n    )\n}\n","import React from 'react'\nimport Snackbar from '@material-ui/core/Snackbar'\nimport Slide from '@material-ui/core/Slide'\nimport Alert from '@material-ui/lab/Alert'\nimport { useStoreState } from 'easy-peasy'\n\nfunction Toast() {\n\n    const { isShowToast, toastText, isGood } = useStoreState(state => state.cards)\n\n    return (\n        <Snackbar open={isShowToast} TransitionComponent={Slide} anchorOrigin={{vertical: \"top\",  horizontal: \"right\"}}>\n            <Alert severity={isGood ? \"success\" : \"error\"}>{toastText}</Alert>\n        </Snackbar>\n    )\n}\n\nexport default React.memo(Toast);\n","import React, { useEffect, useState } from 'react'\nimport { useStoreActions } from 'easy-peasy'\n\nfunction Card({ index, id, isUp, url, isActive, description }) {\n    const { tryFlipCard } = useStoreActions(actions => actions.cards)\n    const [className, setClassName] = useState('')\n\n    useEffect(() => {\n        let str = ''\n        if (isUp) {\n            str += 'flip-up'\n            if (!isActive) {\n                str += ' disabled'\n            }\n        } else {\n            str = 'flip-down'\n        }\n        setClassName(str);\n    }, [isUp, isActive])\n\n    return (\n        <div\n            onClick={() => tryFlipCard(index)}\n            className={\"card \" + className}\n        >\n            {isUp &&\n                <img src={url} alt={description} />\n            }\n        </div>\n    )\n}\n\nexport default React.memo(Card)","import React from 'react'\nimport { useCards } from '../hooks'\nimport Toast from './Toast'\nimport Card from './Card'\n\nexport default function CardsSection() {\n    const { items } = useCards()\n  \n    return (\n      <section className=\"cards\">\n        <article style={{\n          gridTemplate: `repeat(${Math.ceil(items.length ** 0.5)}, 1fr) / repeat(${Math.ceil(items.length ** 0.5)}, 1fr)`,\n          justifyItems:'center'\n        }}>\n          {items.map((card, key) =>\n            <Card {...card} key={key} />)}\n        </article>\n        <Toast />\n      </section>\n    );\n  }","import { useEffect } from 'react'\nimport { useStoreActions, useStoreState } from 'easy-peasy'\n\nexport function useCards() {\n    const { fetchCards } = useStoreActions(actions => actions.cards)\n    const { items } = useStoreState(state => state.cards)\n\n    useEffect(() => {\n        fetchCards()\n    }, [fetchCards])\n\n    return { items }\n}","import React from 'react'\nimport { useStoreState } from 'easy-peasy'\n\nfunction Moves() {\n    const { moves } = useStoreState(state => state.cards)\n\n    return (\n        <h5 style={{ display: 'grid', gap: \"1em\", gridTemplate: '1fr / 1fr 1fr 1fr', justifyItems: 'center' }}>\n            <span>🏃🏻‍♂️</span><span> Moves:</span>\n            <span>{moves}</span>\n        </h5>\n    );\n}\n\nexport default React.memo(Moves)\n\n","import React from 'react'\nimport { useStoreActions } from 'easy-peasy'\nimport Button from '@material-ui/core/Button'\n\nexport default function GameOver() {\n\n    const { playAgain } = useStoreActions(actions => actions.cards)\n  \n    const winningPlayer = 1;\n  \n    return <section className=\"game-over\">\n      <h3>\n        Game Over\n      </h3>\n      <h4>\n        Player {winningPlayer} won!\n      </h4>\n      <article>\n        <Button color=\"primary\" variant=\"contained\" onClick={() => playAgain()}>\n          Play Again?\n        </Button>\n      </article>\n    </section>\n  \n  }","export function getFunctionName() {\n    try {\n        return getFunctionName.caller.name;\n    }\n\n    catch (error) {\n        console.log(error.message)\n    }\n}\n\nexport function delay(timeout) {\n    return new Promise(resolve => setTimeout(() => {\n        resolve()\n    }, timeout))\n}","import React, { useState, useRef } from 'react'\nimport TextField from '@material-ui/core/TextField'\nimport Button from '@material-ui/core/Button'\nimport Tooltip from 'react-bootstrap/Tooltip'\nimport Overlay from 'react-bootstrap/Overlay'\nimport Spinner from 'react-bootstrap/Spinner'\nimport './Login.scss'\nimport Footer from '../Footer'\nimport { useStoreActions, useStoreState } from 'easy-peasy'\nimport { v4 as uuid } from 'uuid'\nimport { delay } from '../../util'\n\nfunction UserNameInput() {\n    const { userName, } = useStoreState(state => state.session)\n    const { setUserName, connect } = useStoreActions(actions => actions.session)\n\n    const handleChangeUserName = e => {\n        e.preventDefault()\n        setUserName(e.target.value)\n    }\n\n    const handleEnter = e => {\n        e.preventDefault()\n        connect();\n    }\n\n    return (\n        <article className=\"user-name-input\">\n            <TextField className=\"text-input\" label={\"User Name\"} variant=\"outlined\"\n                value={userName}\n                onChange={handleChangeUserName}\n                onKeyUp={e => e.keyCode === 13 && handleEnter(e)} />\n            <Button className=\"btn submit-button\" variant=\"contained\" color=\"primary\"\n                onClick={handleEnter}>\n                Enter\n            </Button>\n        </article>\n    )\n}\n\nfunction CopyButtonWithNotificationPopper({ onClick }) {\n    const [show, setShow] = useState(false);\n    const target = useRef(null);\n    const timeout = 2e3;\n\n    const handleClick = async () => {\n        onClick()\n        setShow(true)\n        await delay(timeout)\n        setShow(false)\n    }\n\n    return (\n        <>\n            <Button\n                className=\"btn invite\" variant=\"contained\" color=\"primary\"\n                ref={target} onClick={handleClick}>\n                Invite\n            </Button>\n            <Overlay target={target.current} show={show} placement=\"right\">\n                {(props) => (\n                    <Tooltip id=\"overlay-example\" {...props}>\n                        Copied!\n                    </Tooltip>\n                )}\n            </Overlay>\n        </>\n    );\n}\n\n\nfunction InviteSection() {\n    const [requiredRoomId] = window.location.pathname.match(/[^\\/]+/g) || [];\n\n    const user = useStoreState(state => state.session)\n    const { joinRoom, createRoom } = useStoreActions(actions => actions.session)\n\n    const [joining, setJoining] = useState(false)\n\n    React.useEffect(() => {\n        if (!user.isInsideRoom && !requiredRoomId) {\n            const roomName = uuid()\n            createRoom(roomName)\n            console.log({ roomName })\n        }\n    }, [user.isInsideRoom])\n\n    React.useEffect(() => {\n        if (requiredRoomId && user.isConnected && !user.isInsideRoom) {\n            setJoining(true);\n            joinRoom(requiredRoomId);\n        }\n    })\n\n    const handleInvite = () => {\n        const text = window.location.href + user.roomId;\n        navigator.clipboard.writeText(text)\n            .then(() => {\n                console.log('copied!', { text })\n            })\n            .catch(error => {\n                console.log(error)\n            })\n    }\n\n    return (\n        <article className=\"invite\">\n            {joining ?\n                <Spinner animation=\"border\" />\n                :\n                <CopyButtonWithNotificationPopper onClick={handleInvite} />\n            }\n        </article>\n    )\n}\n\nexport default function Login() {\n\n    const isConnected = useStoreState(state => state.session.isConnected)\n\n    return (\n        <main className=\"login\">\n            <section>\n                <header>\n                    <h1>Card Memory Game</h1>\n                </header>\n                {isConnected ?\n                    <InviteSection />\n                    :\n                    <UserNameInput />\n                }\n            </section>\n            <Footer />\n        </main>\n    )\n}\n","import { action, thunk, actionOn, thunkOn } from 'easy-peasy'\nimport { TOAST_TIMEOUT, CARDS_COUNT } from '../../constants'\nimport _ from 'lodash'\nimport { delay } from '../../util'\n\nexport let items = []\nexport let toastText = ''\n\nexport let isTryingToFlipCard = false;\nexport const setIsTryingToFlipCard = action((state, payload) => {\n    state.isTryingToFlipCard = payload;\n})\n\n// export const onIsTryingToFlipCard = actionOn(\n//     actions => [\n//         actions.tryFlipCard,\n//         actions.onFlipCard,\n//     ],\n//     (state, target) => {\n//         const [tryFlipCard, onFlipCard] = target.resolvedTargets;\n//         switch (target.type) {\n//             case tryFlipCard:\n//                 state.isTryingToFlipCard = true;\n//                 break;\n//             case onFlipCard:\n//                 state.isTryingToFlipCard = false;\n//                 break;\n//             default: break;\n//         }\n//     }\n// )\n\nexport const tryFlipCard = thunk((actions, payload, { getStoreState, getStoreActions }) => {\n    console.log('[tryFlipCard]', { payload })\n    const { session: user = {} } = getStoreState();\n    if (user.isMyTurn) {\n        actions.setIsTryingToFlipCard(true);\n        actions.flipCard(payload) // payload := card.index\n        actions.bumpMoves()\n        getStoreActions().session.notifyFlipCard(payload)\n    } else {\n        actions.showToast({ text: 'Wait for your turn.' })\n    }\n})\n\nexport const bumpMoves = action((state) => {\n    console.log('[bumpMoves]')\n    state.moves++;\n})\n\nexport const setCardIsUp = action((state, payload) => {\n    console.log('[setCardIsUp]', { payload })\n    const { index, isUp } = payload;\n    const card = state.items.find(card => card.index === index);\n\n    if (!card) {\n        console.log(`[setCardIsUp] card index ${index} not found.`);\n        return;\n    }\n\n    card.isUp = isUp;\n})\n\nexport const flipCard = thunk((actions, payload, { getState }) => {\n    console.log('[flipCard]', { payload })\n    const state = getState();\n\n    if (state.items.filter(x => x.isActive && x.isUp).length >= 2) {\n        return;\n    }\n\n    const index = payload;\n    actions.setCardIsUp({ index, isUp: true });\n})\n\nexport const onFlipCard = thunkOn(\n    actions => actions.flipCard,\n    async (actions, target, { getState, getStoreActions, getStoreState, meta, injections }) => {\n        console.log('[onFlipCard]')\n        const index = target.payload;\n        const card = getState().items.find(card => card.index === index);\n\n        if (!card) {\n            console.log(`[onFlipCard] card index ${index} not found.`);\n            return;\n        }\n\n        const twinCard = getState().items.find(x => x !== card && x.id === card.id)\n\n        const upCards = getState().items.filter(x => x.isUp && x.isActive);\n\n        if (upCards.length >= 2) {\n            if (twinCard?.isUp && card.isUp) {\n                const text = `${getStoreState().session.isMyTurn ? \"You\" : \"He\"} found ${card.description}!`\n                actions.showToast({ text, isGood: getStoreState().session.isMyTurn })\n                await delay(TOAST_TIMEOUT / 2)\n                actions.removeCards([card, twinCard])\n            } else {\n                const text = getStoreState().session.isMyTurn ?\n                    `You are wrong! Turn passes to opponent...`\n                    :\n                    `He is wrong. Your turn now...`\n\n                actions.showToast({ text, isGood: !getStoreState().session.isMyTurn })\n                await delay(TOAST_TIMEOUT * 0.7)\n                actions.coverCards(upCards)\n\n                if (getStoreState().session.isMyTurn && getState().isTryingToFlipCard) {\n                    console.log('[onFlipCard]', { meta, injections })\n                    getStoreActions().session.turnEnd()\n                }\n            }\n        }\n\n        actions.setIsTryingToFlipCard(false)\n    })\n\nexport const removeCards = action((state, payload) => {\n    const cardsToRemove = payload;\n    cardsToRemove.forEach(card => card.isActive = false)\n})\n\nexport const showToast = action((state, payload) => {\n    state.isShowToast = true;\n    state.toastText = payload.text;\n    state.isGood = payload.isGood;\n})\n\nexport const clearToast = action(state => {\n    state.isShowToast = false;\n})\n\nexport const onShowToast = thunkOn(\n    actions => actions.showToast,\n    async (actions) => {\n        await delay(TOAST_TIMEOUT);\n        actions.clearToast();\n    }\n)\n\nexport const coverCards = action((state, payload) => {\n    const cardsToCover = payload;\n    cardsToCover.forEach(card => card.isUp = false)\n})\n\n\n\nclass Card {\n    constructor(id, index, url, description) {\n        this.isUp = false;\n        this.id = id;\n        this.index = index;\n        this.url = url;\n        this.isActive = true;\n        this.description = description;\n    }\n}\n\nexport const fetchCards = thunk(async (actions, payload, { getStoreState }) => {\n    let url = `/api/cards`\n    const { session: user = {} } = getStoreState()\n\n    if (user.isInsideRoom) {\n        url += `?roomId=${user.roomId}`\n    } else {\n        console.log('[fetch cards] user is fetching cards outside of room')\n    }\n\n    const response = await fetch(url)\n    if (response.ok) {\n        const result = await response.json();\n        actions.setCards(result)\n    } else {\n        console.log(\n            `response is not ok ` +\n            `status: ${response.status} ${response.text}`)\n    }\n})\n\nexport const setCards = action((state, payload) => {\n    state.items = payload;\n})\n\nexport const checkIfGameIsOver = actionOn(\n    actions => actions.removeCards,\n    state => {\n        if (state.items.filter(x => x.isActive).length === 0)\n            state.isGameOver = true;\n    }\n)\n\nexport const resetGame = action(state => {\n    state.isGameOver = false;\n    state.items = [];\n    state.moves = 0;\n})\n\nexport const playAgain = thunk(actions => {\n    actions.resetGame()\n    actions.fetchCards()\n})\n\nexport let loading = false;\n\nexport const onLoading = actionOn(\n    actions => [\n        actions.fetchCards.startType,\n        actions.fetchCards.type\n    ],\n    (state, target) => {\n        const [start, end] = target.resolvedTargets;\n        switch (target.type) {\n            case start:\n                state.loading = true;\n                break;\n            case end:\n                state.loading = false;\n                break;\n            default: break;\n        }\n    }\n)\n\nexport let isGameOver = false;\nexport let isShowToast = false;\nexport let moves = 0;","export const CARDS_COUNT = 4 ** 2;\nexport const TOAST_TIMEOUT = 2e3;","import { thunk, thunkOn, action, actionOn } from 'easy-peasy'\nimport _ from 'lodash'\nimport io from 'socket.io-client'\n\nconst MINIMUM_PAYERS_COUNT_TO_PLAY = 2;\n\nexport const userName = '';\nexport const roomId = '';\nexport const roomName = '';\nexport const availableRooms = [];\nexport const socket = null;\nexport const isConnected = false;\nexport const isAwaitingOtherPlayer = false;\nexport const opponent = { id: '', userName: '' };\nexport const isInsideRoom = false;\nexport const isMyTurn = false;\n\nexport const setIsMyTurn = action((state, payload) => {\n    state.isMyTurn = payload;\n})\n\nexport const fetchAvailableRooms = thunk(async (actions) => {\n    console.log(`[fetchAvailableRooms] in`)\n\n    try {\n        const response = await fetch('/api/rooms')\n\n        if (response.ok) {\n            const result = await response.json();\n            actions.setAvailableRooms(result.available)\n        } else {\n            console.log(`[fetchAvailableRooms]`, { response })\n        }\n    }\n    catch (error) {\n        console.log(`[fetchAvailableRooms]`, { error })\n    }\n})\n\nexport const setIsConnected = action((state, payload) => {\n    state.isConnected = payload;\n})\n\nexport const setAvailableRooms = action((state, payload) => {\n    state.availableRooms = payload;\n})\n\nexport const setSocket = action((state, payload) => {\n    state.socket = payload;\n})\n\nexport const setRoomId = action((state, payload) => {\n    state.roomId = payload;\n})\n\nexport const setRoomName = action((state, payload) => {\n    state.roomName = payload;\n})\n\nexport const setUserName = action((state, payload) => {\n    state.userName = payload;\n})\n\nexport const setIsAwaitingOtherPlayer = action((state, payload) => {\n    state.isAwaitingOtherPlayer = payload;\n})\n\nexport const setOpponent = action((state, payload) => {\n    state.opponent = payload;\n})\n\nexport const notifyFlipCard = action((state, payload) => {\n    const { socket, roomId } = state;\n    const cardIndex = payload;\n    if (socket && roomId) {\n        socket.emit('flip_card', roomId, cardIndex)\n    }\n})\n\nexport const turnEnd = action((state) => {\n    console.log('turnEnd')\n    state.isMyTurn = false;\n})\n\nexport const onTurnEnd = actionOn(actions => actions.turnEnd, (state) => {\n    console.log('notifyTurnEnd')\n    const { socket, roomId } = state;\n    if (socket && roomId) {\n        socket.emit('turn_end', roomId)\n    }\n})\n\nexport const connect = thunk((actions, payload, { getStoreActions }) => {\n    const socket = io();\n\n    const shouldAwaitOtherPlayer = usersCountInRoom => {\n        if (usersCountInRoom < MINIMUM_PAYERS_COUNT_TO_PLAY) {\n            actions.setIsAwaitingOtherPlayer(true);\n        } else {\n            actions.setIsAwaitingOtherPlayer(false);\n        }\n    }\n\n    socket.on('connect', () => {\n        actions.setIsConnected(socket.connected)\n    })\n\n    socket.on('message', function (message) {\n        console.log(message);\n    })\n\n    socket.on('roomId', (roomId, usersCountInRoom) => {\n        actions.setRoomId(roomId);\n        shouldAwaitOtherPlayer(usersCountInRoom);\n    })\n\n    socket.on('other_player_join', (otherId, otherUserName, usersCountInRoom) => {\n        actions.setOpponent({ id: otherId, userName: otherUserName })\n        shouldAwaitOtherPlayer(usersCountInRoom)\n    })\n\n    socket.on('other_player_flip_card', (otherPlayerUserName, cardIndex) => {\n        console.log(`[other_player_flip_card]`, { otherPlayerUserName, cardIndex })\n        getStoreActions().cards.flipCard(cardIndex)\n    })\n\n    socket.on('error', error => {\n        console.log(error) // todo: notify the user\n    })\n\n    socket.on('turn_change', (isMyTurn) => {\n        console.log(`[turn_change]`, { isMyTurn });\n        actions.setIsMyTurn(isMyTurn);\n    })\n\n    actions.setSocket(socket);\n\n})\n\nexport const createRoom = action((state, payload) => {\n    const roomName = payload;\n    const { userName } = state;\n    if (state.socket)\n        state.socket.emit('create_room', roomName, userName)\n})\n\nexport const leaveRoom = action((state) => {\n    const { roomId, socket } = state;\n    if (socket && roomId)\n        socket.emit('leave_room', roomId);\n})\n\nexport const joinRoom = action((state, payload) => {\n    const roomId = payload;\n    const { socket, userName } = state;\n    if (socket)\n        socket.emit('join_room', roomId, userName);\n})\n\nexport const onIsInsideRoomChange = actionOn(\n    actions => [\n        actions.leaveRoom,\n        actions.setRoomId\n    ],\n    (state, target) => {\n        const [leaveRoom, setRoomId] = target.resolvedTargets;\n        switch (target.type) {\n            case setRoomId:\n                state.isInsideRoom = true;\n                break;\n            case leaveRoom:\n                state.isInsideRoom = false;\n                break;\n            default:\n                break;\n        }\n    })","import { createStore } from 'easy-peasy'\nimport * as cardsModel from './models/cardsModel'\nimport * as sessionModel from './models/sessionModel'\n\nconst model = {\n    cards: {...cardsModel},\n    session: {...sessionModel},\n}\n\nconst store = createStore(model)\n\nexport default store;","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport 'bootstrap/dist/css/bootstrap.min.css';\nimport App from './App';\nimport { StoreProvider } from 'easy-peasy'\nimport store from './redux/store'\n\nReactDOM.render(\n    <StoreProvider store={store}>\n        <App />\n    </StoreProvider>,\n    document.getElementById('root'));","import React, { useState, useEffect } from 'react';\nimport Footer from './components/Footer'\nimport { useStoreState, useStoreActions } from 'easy-peasy'\nimport CardsSection from './components/CardsSection'\nimport Moves from './components/Moves'\nimport GameOver from './components/GameOver'\nimport './App.scss'\nimport Login from './components/Login';\n\nexport default function App() {\n  const { isGameOver } = useStoreState(state => state.cards)\n  const user = useStoreState(state => state.session)\n\n  if (!user.isConnected || !user.isInsideRoom || user.isAwaitingOtherPlayer) return <Login />\n\n  return (\n    <main>\n      <header>\n        <Moves />\n      </header>\n      {\n        isGameOver\n          ? <GameOver />\n          : <CardsSection />\n      }\n      <Footer />\n    </main>\n  );\n}\n\n\n\n"],"sourceRoot":""}